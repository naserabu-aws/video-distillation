{"ast":null,"code":"var _jsxFileName = \"/Users/naserabu/Desktop/video distillation/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport { S3Client, PutObjectCommand, ListObjectsV2Command, HeadObjectCommand, GetObjectCommand } from '@aws-sdk/client-s3';\nimport { getSignedUrl } from '@aws-sdk/s3-request-presigner';\n\n// S3 bucket name\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst S3_BUCKET = process.env.REACT_APP_S3_BUCKET || 'video-transcription-bucket-1747461583';\n\n// Initialize the S3 client\nconst s3Client = new S3Client({\n  region: process.env.REACT_APP_AWS_REGION || 'us-east-1',\n  credentials: {\n    accessKeyId: process.env.REACT_APP_AWS_ACCESS_KEY_ID,\n    secretAccessKey: process.env.REACT_APP_AWS_SECRET_ACCESS_KEY\n  }\n});\nfunction App() {\n  _s();\n  const [file, setFile] = useState(null);\n  const [uploadProgress, setUploadProgress] = useState(0);\n  const [uploadStatus, setUploadStatus] = useState('');\n  const [isUploading, setIsUploading] = useState(false);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [highlightVideo, setHighlightVideo] = useState(null);\n  const [s3Key, setS3Key] = useState('');\n  const [dragActive, setDragActive] = useState(false);\n  const fileInputRef = useRef(null);\n  const pollingIntervalRef = useRef(null);\n\n  // Clean up polling interval on component unmount\n  useEffect(() => {\n    return () => {\n      if (pollingIntervalRef.current) {\n        clearInterval(pollingIntervalRef.current);\n      }\n    };\n  }, []);\n\n  // Handle file selection\n  const handleFileChange = e => {\n    const selectedFile = e.target.files[0];\n    if (selectedFile && selectedFile.type === 'video/mp4') {\n      setFile(selectedFile);\n      setUploadStatus('');\n      setHighlightVideo(null);\n    } else {\n      setUploadStatus('error');\n      setFile(null);\n      alert('Please select an MP4 video file.');\n    }\n  };\n\n  // Handle drag events\n  const handleDrag = e => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (e.type === 'dragenter' || e.type === 'dragover') {\n      setDragActive(true);\n    } else if (e.type === 'dragleave') {\n      setDragActive(false);\n    }\n  };\n\n  // Handle drop event\n  const handleDrop = e => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragActive(false);\n    if (e.dataTransfer.files && e.dataTransfer.files[0]) {\n      const droppedFile = e.dataTransfer.files[0];\n      if (droppedFile.type === 'video/mp4') {\n        setFile(droppedFile);\n        setUploadStatus('');\n        setHighlightVideo(null);\n      } else {\n        setUploadStatus('error');\n        setFile(null);\n        alert('Please select an MP4 video file.');\n      }\n    }\n  };\n\n  // Handle file upload\n  const handleUpload = async () => {\n    if (!file) {\n      alert('Please select a file first.');\n      return;\n    }\n    try {\n      setIsUploading(true);\n      setUploadProgress(0);\n      setUploadStatus('uploading');\n\n      // Generate a unique filename with timestamp and random ID in the format YYYYMMDDHHMMSS-ID\n      const now = new Date();\n      const timestamp = now.getFullYear() + String(now.getMonth() + 1).padStart(2, '0') + String(now.getDate()).padStart(2, '0') + String(now.getHours()).padStart(2, '0') + String(now.getMinutes()).padStart(2, '0') + String(now.getSeconds()).padStart(2, '0');\n\n      // Generate a longer ID similar to the highlight video format\n      const randomId = Array.from(window.crypto.getRandomValues(new Uint8Array(12))).map(b => b.toString(16).padStart(2, '0')).join('');\n      const cleanedFilename = file.name.replace(/[^a-zA-Z0-9._-]/g, '');\n      const s3Key = `input-videos/${timestamp}-${randomId}-${cleanedFilename}`;\n      setS3Key(s3Key);\n      console.log('Generating presigned URL for S3 key:', s3Key);\n\n      // Create the command to put the object in S3\n      const command = new PutObjectCommand({\n        Bucket: S3_BUCKET,\n        Key: s3Key,\n        ContentType: file.type\n      });\n\n      // Generate a presigned URL for uploading\n      const presignedUrl = await getSignedUrl(s3Client, command, {\n        expiresIn: 3600\n      });\n      console.log('Generated presigned URL:', presignedUrl);\n\n      // Use XMLHttpRequest for upload progress tracking\n      const xhr = new XMLHttpRequest();\n      xhr.open('PUT', presignedUrl);\n      xhr.setRequestHeader('Content-Type', file.type);\n      xhr.upload.onprogress = event => {\n        if (event.lengthComputable) {\n          const percentCompleted = Math.round(event.loaded * 100 / event.total);\n          setUploadProgress(percentCompleted);\n        }\n      };\n      xhr.onload = () => {\n        if (xhr.status === 200) {\n          console.log('Upload successful');\n          setUploadStatus('success');\n          setIsUploading(false);\n          setIsProcessing(true);\n\n          // Start polling for highlight video\n          startPollingForHighlight(s3Key);\n        } else {\n          console.error('Upload failed with status:', xhr.status);\n          throw new Error(`Upload failed with status: ${xhr.status}`);\n        }\n      };\n      xhr.onerror = () => {\n        console.error('Network error during upload');\n        throw new Error('Upload failed due to network error');\n      };\n      xhr.send(file);\n    } catch (error) {\n      console.error('Error uploading file:', error);\n      setUploadStatus('error');\n      setIsUploading(false);\n    }\n  };\n\n  // Poll for highlight video\n  const startPollingForHighlight = videoKey => {\n    if (pollingIntervalRef.current) {\n      clearInterval(pollingIntervalRef.current);\n    }\n    let attempts = 0;\n    const maxAttempts = 30; // Poll for up to 5 minutes (30 * 10 seconds)\n\n    pollingIntervalRef.current = setInterval(async () => {\n      attempts++;\n      console.log(`Polling for highlight video, attempt ${attempts}/${maxAttempts}`);\n      try {\n        // Try multiple patterns to find the highlight video\n\n        // Extract info from the input video key\n        // Format: input-videos/TIMESTAMP-ID-filename.mp4\n        const keyParts = videoKey.split('/');\n        const filename = keyParts[keyParts.length - 1];\n        const filenameParts = filename.split('-');\n\n        // List of possible highlight video patterns to check\n        const highlightPatterns = [];\n\n        // We'll rely on the list operation to find the correct highlight video\n        // rather than trying to construct the exact path\n\n        // Pattern 2: Fallback to check for any recent highlight videos\n        // This is useful if the backend uses a different naming convention\n        try {\n          console.log(\"Attempting to list all highlight videos in the bucket\");\n          const listCommand = new ListObjectsV2Command({\n            Bucket: S3_BUCKET,\n            Prefix: 'highlight-videos/',\n            MaxKeys: 20\n          });\n          const listResponse = await s3Client.send(listCommand);\n          if (listResponse.Contents) {\n            // Sort by last modified date (newest first)\n            const sortedObjects = [...listResponse.Contents].sort((a, b) => new Date(b.LastModified) - new Date(a.LastModified));\n\n            // Extract the input video ID (if available)\n            let inputVideoId = null;\n            if (filenameParts.length >= 2) {\n              inputVideoId = filenameParts[1];\n              console.log(`Input video ID: ${inputVideoId}`);\n            }\n            console.log(`Found ${sortedObjects.length} objects in highlight-videos/ prefix`);\n\n            // Log all highlight videos for debugging\n            sortedObjects.forEach((obj, index) => {\n              if (obj.Key.endsWith('-highlights.mp4')) {\n                console.log(`[${index}] ${obj.Key} (Last Modified: ${obj.LastModified})`);\n              }\n            });\n\n            // First, try to find highlight videos that match our input video ID\n            if (inputVideoId) {\n              console.log(`Looking for highlight videos with ID: ${inputVideoId}`);\n              for (const obj of sortedObjects) {\n                if (obj.Key.endsWith('-highlights.mp4') && obj.Key.includes(inputVideoId)) {\n                  // This highlight video contains our input video ID - highest priority\n                  highlightPatterns.unshift(obj.Key); // Add to beginning of array for priority\n                  console.log(`Found highlight video with matching ID: ${obj.Key}`);\n                }\n              }\n            }\n\n            // If we didn't find any matches by ID, use the most recent highlight video\n            if (highlightPatterns.length === 0) {\n              console.log(\"No matching highlight videos found by ID, using most recent\");\n\n              // Get the most recent highlight video\n              const mostRecent = sortedObjects.find(obj => obj.Key.endsWith('-highlights.mp4'));\n              if (mostRecent) {\n                highlightPatterns.push(mostRecent.Key);\n                console.log(`Using most recent highlight video: ${mostRecent.Key}`);\n              }\n            }\n\n            // Then add all other highlight videos as fallbacks\n            for (const obj of sortedObjects) {\n              if (obj.Key.endsWith('-highlights.mp4') && !highlightPatterns.includes(obj.Key)) {\n                highlightPatterns.push(obj.Key);\n              }\n            }\n            console.log(`Final highlight patterns to check (in order): ${JSON.stringify(highlightPatterns)}`);\n          }\n        } catch (error) {\n          console.error(\"Error listing highlight videos:\", error);\n          // Continue with the patterns we already have\n        }\n\n        // Try each pattern until we find a valid highlight video\n        let foundHighlight = false;\n        for (const highlightKey of highlightPatterns) {\n          console.log(`Checking for highlight video with key: ${highlightKey}`);\n          try {\n            // Check if the object exists in S3\n            const headCommand = new HeadObjectCommand({\n              Bucket: S3_BUCKET,\n              Key: highlightKey\n            });\n            try {\n              await s3Client.send(headCommand);\n\n              // If we get here, the file exists - generate a presigned URL\n              const getCommand = new GetObjectCommand({\n                Bucket: S3_BUCKET,\n                Key: highlightKey\n              });\n              const highlightUrl = await getSignedUrl(s3Client, getCommand, {\n                expiresIn: 3600\n              });\n              setHighlightVideo(highlightUrl);\n              setIsProcessing(false);\n              clearInterval(pollingIntervalRef.current);\n              foundHighlight = true;\n              console.log(`Found highlight video at: ${highlightKey}, generated presigned URL`);\n              break;\n            } catch (err) {\n              console.log(`Highlight not found at ${highlightKey}`);\n            }\n          } catch (error) {\n            console.log(`Error checking for highlight at ${highlightKey}:`, error);\n          }\n        }\n\n        // If we've checked all patterns and still haven't found a highlight\n        if (!foundHighlight) {\n          console.log(`No highlight video found yet. Attempt ${attempts}/${maxAttempts}`);\n          if (attempts >= maxAttempts) {\n            setIsProcessing(false);\n            setUploadStatus('error');\n            clearInterval(pollingIntervalRef.current);\n            alert('Highlight generation timed out. Please try again later.');\n          }\n        }\n      } catch (error) {\n        console.error('Error polling for highlight:', error);\n        if (attempts >= maxAttempts) {\n          setIsProcessing(false);\n          setUploadStatus('error');\n          clearInterval(pollingIntervalRef.current);\n          alert('Highlight generation timed out. Please try again later.');\n        }\n      }\n    }, 10000); // Poll every 10 seconds\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Video Highlights Generator\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"upload-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `drop-zone ${dragActive ? 'active' : ''}`,\n        onClick: () => fileInputRef.current.click(),\n        onDragEnter: handleDrag,\n        onDragOver: handleDrag,\n        onDragLeave: handleDrag,\n        onDrop: handleDrop,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          ref: fileInputRef,\n          onChange: handleFileChange,\n          accept: \"video/mp4\",\n          style: {\n            display: 'none'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 343,\n          columnNumber: 11\n        }, this), file ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Selected file: \", file.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Drag and drop an MP4 video file here, or click to select a file\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 9\n      }, this), file && !isUploading && !isProcessing && !highlightVideo && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleUpload,\n        style: {\n          padding: '10px 20px',\n          backgroundColor: '#007bff',\n          color: 'white',\n          border: 'none',\n          borderRadius: '5px',\n          cursor: 'pointer',\n          fontSize: '16px',\n          width: '100%'\n        },\n        children: \"Upload Video\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 11\n      }, this), isUploading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"progress-bar\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"progress-bar-fill\",\n            style: {\n              width: `${uploadProgress}%`\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 378,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 377,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Uploading: \", uploadProgress, \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 383,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 11\n      }, this), uploadStatus === 'success' && !isProcessing && !highlightVideo && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-message success\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Upload successful!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 389,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 11\n      }, this), uploadStatus === 'error' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-message error\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Error uploading file. Please try again.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 395,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 11\n      }, this), isProcessing && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-message info\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Processing transcription and highlights... This may take a few minutes.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 401,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 400,\n        columnNumber: 11\n      }, this), highlightVideo && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"video-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Your Highlight Video\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 407,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n          controls: true,\n          children: [/*#__PURE__*/_jsxDEV(\"source\", {\n            src: highlightVideo,\n            type: \"video/mp4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 409,\n            columnNumber: 15\n          }, this), \"Your browser does not support the video tag.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 408,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 406,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 329,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"l8Uj50KQTEH31bgH5fVprl7lOis=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","S3Client","PutObjectCommand","ListObjectsV2Command","HeadObjectCommand","GetObjectCommand","getSignedUrl","jsxDEV","_jsxDEV","S3_BUCKET","process","env","REACT_APP_S3_BUCKET","s3Client","region","REACT_APP_AWS_REGION","credentials","accessKeyId","REACT_APP_AWS_ACCESS_KEY_ID","secretAccessKey","REACT_APP_AWS_SECRET_ACCESS_KEY","App","_s","file","setFile","uploadProgress","setUploadProgress","uploadStatus","setUploadStatus","isUploading","setIsUploading","isProcessing","setIsProcessing","highlightVideo","setHighlightVideo","s3Key","setS3Key","dragActive","setDragActive","fileInputRef","pollingIntervalRef","current","clearInterval","handleFileChange","e","selectedFile","target","files","type","alert","handleDrag","preventDefault","stopPropagation","handleDrop","dataTransfer","droppedFile","handleUpload","now","Date","timestamp","getFullYear","String","getMonth","padStart","getDate","getHours","getMinutes","getSeconds","randomId","Array","from","window","crypto","getRandomValues","Uint8Array","map","b","toString","join","cleanedFilename","name","replace","console","log","command","Bucket","Key","ContentType","presignedUrl","expiresIn","xhr","XMLHttpRequest","open","setRequestHeader","upload","onprogress","event","lengthComputable","percentCompleted","Math","round","loaded","total","onload","status","startPollingForHighlight","error","Error","onerror","send","videoKey","attempts","maxAttempts","setInterval","keyParts","split","filename","length","filenameParts","highlightPatterns","listCommand","Prefix","MaxKeys","listResponse","Contents","sortedObjects","sort","a","LastModified","inputVideoId","forEach","obj","index","endsWith","includes","unshift","mostRecent","find","push","JSON","stringify","foundHighlight","highlightKey","headCommand","getCommand","highlightUrl","err","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","click","onDragEnter","onDragOver","onDragLeave","onDrop","ref","onChange","accept","style","display","padding","backgroundColor","color","border","borderRadius","cursor","fontSize","width","controls","src","_c","$RefreshReg$"],"sources":["/Users/naserabu/Desktop/video distillation/frontend/src/App.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport { S3Client, PutObjectCommand, ListObjectsV2Command, HeadObjectCommand, GetObjectCommand } from '@aws-sdk/client-s3';\nimport { getSignedUrl } from '@aws-sdk/s3-request-presigner';\n\n// S3 bucket name\nconst S3_BUCKET = process.env.REACT_APP_S3_BUCKET || 'video-transcription-bucket-1747461583';\n\n// Initialize the S3 client\nconst s3Client = new S3Client({\n  region: process.env.REACT_APP_AWS_REGION || 'us-east-1',\n  credentials: {\n    accessKeyId: process.env.REACT_APP_AWS_ACCESS_KEY_ID,\n    secretAccessKey: process.env.REACT_APP_AWS_SECRET_ACCESS_KEY,\n  },\n});\n\nfunction App() {\n  const [file, setFile] = useState(null);\n  const [uploadProgress, setUploadProgress] = useState(0);\n  const [uploadStatus, setUploadStatus] = useState('');\n  const [isUploading, setIsUploading] = useState(false);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [highlightVideo, setHighlightVideo] = useState(null);\n  const [s3Key, setS3Key] = useState('');\n  const [dragActive, setDragActive] = useState(false);\n  const fileInputRef = useRef(null);\n  const pollingIntervalRef = useRef(null);\n\n  // Clean up polling interval on component unmount\n  useEffect(() => {\n    return () => {\n      if (pollingIntervalRef.current) {\n        clearInterval(pollingIntervalRef.current);\n      }\n    };\n  }, []);\n\n  // Handle file selection\n  const handleFileChange = (e) => {\n    const selectedFile = e.target.files[0];\n    if (selectedFile && selectedFile.type === 'video/mp4') {\n      setFile(selectedFile);\n      setUploadStatus('');\n      setHighlightVideo(null);\n    } else {\n      setUploadStatus('error');\n      setFile(null);\n      alert('Please select an MP4 video file.');\n    }\n  };\n\n  // Handle drag events\n  const handleDrag = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    \n    if (e.type === 'dragenter' || e.type === 'dragover') {\n      setDragActive(true);\n    } else if (e.type === 'dragleave') {\n      setDragActive(false);\n    }\n  };\n\n  // Handle drop event\n  const handleDrop = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragActive(false);\n    \n    if (e.dataTransfer.files && e.dataTransfer.files[0]) {\n      const droppedFile = e.dataTransfer.files[0];\n      if (droppedFile.type === 'video/mp4') {\n        setFile(droppedFile);\n        setUploadStatus('');\n        setHighlightVideo(null);\n      } else {\n        setUploadStatus('error');\n        setFile(null);\n        alert('Please select an MP4 video file.');\n      }\n    }\n  };\n\n  // Handle file upload\n  const handleUpload = async () => {\n    if (!file) {\n      alert('Please select a file first.');\n      return;\n    }\n\n    try {\n      setIsUploading(true);\n      setUploadProgress(0);\n      setUploadStatus('uploading');\n\n      // Generate a unique filename with timestamp and random ID in the format YYYYMMDDHHMMSS-ID\n      const now = new Date();\n      const timestamp = now.getFullYear() +\n        String(now.getMonth() + 1).padStart(2, '0') +\n        String(now.getDate()).padStart(2, '0') +\n        String(now.getHours()).padStart(2, '0') +\n        String(now.getMinutes()).padStart(2, '0') +\n        String(now.getSeconds()).padStart(2, '0');\n      \n      // Generate a longer ID similar to the highlight video format\n      const randomId = Array.from(window.crypto.getRandomValues(new Uint8Array(12)))\n        .map(b => b.toString(16).padStart(2, '0'))\n        .join('');\n      \n      const cleanedFilename = file.name.replace(/[^a-zA-Z0-9._-]/g, '');\n      const s3Key = `input-videos/${timestamp}-${randomId}-${cleanedFilename}`;\n      setS3Key(s3Key);\n\n      console.log('Generating presigned URL for S3 key:', s3Key);\n      \n      // Create the command to put the object in S3\n      const command = new PutObjectCommand({\n        Bucket: S3_BUCKET,\n        Key: s3Key,\n        ContentType: file.type,\n      });\n      \n      // Generate a presigned URL for uploading\n      const presignedUrl = await getSignedUrl(s3Client, command, { expiresIn: 3600 });\n      console.log('Generated presigned URL:', presignedUrl);\n      \n      // Use XMLHttpRequest for upload progress tracking\n      const xhr = new XMLHttpRequest();\n      xhr.open('PUT', presignedUrl);\n      xhr.setRequestHeader('Content-Type', file.type);\n      \n      xhr.upload.onprogress = (event) => {\n        if (event.lengthComputable) {\n          const percentCompleted = Math.round((event.loaded * 100) / event.total);\n          setUploadProgress(percentCompleted);\n        }\n      };\n      \n      xhr.onload = () => {\n        if (xhr.status === 200) {\n          console.log('Upload successful');\n          setUploadStatus('success');\n          setIsUploading(false);\n          setIsProcessing(true);\n          \n          // Start polling for highlight video\n          startPollingForHighlight(s3Key);\n        } else {\n          console.error('Upload failed with status:', xhr.status);\n          throw new Error(`Upload failed with status: ${xhr.status}`);\n        }\n      };\n      \n      xhr.onerror = () => {\n        console.error('Network error during upload');\n        throw new Error('Upload failed due to network error');\n      };\n      \n      xhr.send(file);\n    } catch (error) {\n      console.error('Error uploading file:', error);\n      setUploadStatus('error');\n      setIsUploading(false);\n    }\n  };\n\n  // Poll for highlight video\n  const startPollingForHighlight = (videoKey) => {\n    if (pollingIntervalRef.current) {\n      clearInterval(pollingIntervalRef.current);\n    }\n\n    let attempts = 0;\n    const maxAttempts = 30; // Poll for up to 5 minutes (30 * 10 seconds)\n\n    pollingIntervalRef.current = setInterval(async () => {\n      attempts++;\n      console.log(`Polling for highlight video, attempt ${attempts}/${maxAttempts}`);\n      \n      try {\n        // Try multiple patterns to find the highlight video\n        \n        // Extract info from the input video key\n        // Format: input-videos/TIMESTAMP-ID-filename.mp4\n        const keyParts = videoKey.split('/');\n        const filename = keyParts[keyParts.length - 1];\n        const filenameParts = filename.split('-');\n        \n        // List of possible highlight video patterns to check\n        const highlightPatterns = [];\n        \n        // We'll rely on the list operation to find the correct highlight video\n        // rather than trying to construct the exact path\n        \n        // Pattern 2: Fallback to check for any recent highlight videos\n        // This is useful if the backend uses a different naming convention\n        try {\n          console.log(\"Attempting to list all highlight videos in the bucket\");\n          const listCommand = new ListObjectsV2Command({\n            Bucket: S3_BUCKET,\n            Prefix: 'highlight-videos/',\n            MaxKeys: 20\n          });\n          \n          const listResponse = await s3Client.send(listCommand);\n          \n          if (listResponse.Contents) {\n            // Sort by last modified date (newest first)\n            const sortedObjects = [...listResponse.Contents].sort((a, b) => \n              new Date(b.LastModified) - new Date(a.LastModified)\n            );\n            \n            // Extract the input video ID (if available)\n            let inputVideoId = null;\n            if (filenameParts.length >= 2) {\n              inputVideoId = filenameParts[1];\n              console.log(`Input video ID: ${inputVideoId}`);\n            }\n            \n            console.log(`Found ${sortedObjects.length} objects in highlight-videos/ prefix`);\n            \n            // Log all highlight videos for debugging\n            sortedObjects.forEach((obj, index) => {\n              if (obj.Key.endsWith('-highlights.mp4')) {\n                console.log(`[${index}] ${obj.Key} (Last Modified: ${obj.LastModified})`);\n              }\n            });\n            \n            // First, try to find highlight videos that match our input video ID\n            if (inputVideoId) {\n              console.log(`Looking for highlight videos with ID: ${inputVideoId}`);\n              for (const obj of sortedObjects) {\n                if (obj.Key.endsWith('-highlights.mp4') && obj.Key.includes(inputVideoId)) {\n                  // This highlight video contains our input video ID - highest priority\n                  highlightPatterns.unshift(obj.Key); // Add to beginning of array for priority\n                  console.log(`Found highlight video with matching ID: ${obj.Key}`);\n                }\n              }\n            }\n            \n            // If we didn't find any matches by ID, use the most recent highlight video\n            if (highlightPatterns.length === 0) {\n              console.log(\"No matching highlight videos found by ID, using most recent\");\n              \n              // Get the most recent highlight video\n              const mostRecent = sortedObjects.find(obj => obj.Key.endsWith('-highlights.mp4'));\n              if (mostRecent) {\n                highlightPatterns.push(mostRecent.Key);\n                console.log(`Using most recent highlight video: ${mostRecent.Key}`);\n              }\n            }\n            \n            // Then add all other highlight videos as fallbacks\n            for (const obj of sortedObjects) {\n              if (obj.Key.endsWith('-highlights.mp4') && !highlightPatterns.includes(obj.Key)) {\n                highlightPatterns.push(obj.Key);\n              }\n            }\n            \n            console.log(`Final highlight patterns to check (in order): ${JSON.stringify(highlightPatterns)}`);\n          }\n        } catch (error) {\n          console.error(\"Error listing highlight videos:\", error);\n          // Continue with the patterns we already have\n        }\n        \n        // Try each pattern until we find a valid highlight video\n        let foundHighlight = false;\n        for (const highlightKey of highlightPatterns) {\n          console.log(`Checking for highlight video with key: ${highlightKey}`);\n          \n          try {\n            // Check if the object exists in S3\n            const headCommand = new HeadObjectCommand({\n              Bucket: S3_BUCKET,\n              Key: highlightKey\n            });\n            \n            try {\n              await s3Client.send(headCommand);\n              \n              // If we get here, the file exists - generate a presigned URL\n              const getCommand = new GetObjectCommand({\n                Bucket: S3_BUCKET,\n                Key: highlightKey\n              });\n              \n              const highlightUrl = await getSignedUrl(s3Client, getCommand, { expiresIn: 3600 });\n              \n              setHighlightVideo(highlightUrl);\n              setIsProcessing(false);\n              clearInterval(pollingIntervalRef.current);\n              foundHighlight = true;\n              console.log(`Found highlight video at: ${highlightKey}, generated presigned URL`);\n              break;\n            } catch (err) {\n              console.log(`Highlight not found at ${highlightKey}`);\n            }\n          } catch (error) {\n            console.log(`Error checking for highlight at ${highlightKey}:`, error);\n          }\n        }\n        \n        // If we've checked all patterns and still haven't found a highlight\n        if (!foundHighlight) {\n          console.log(`No highlight video found yet. Attempt ${attempts}/${maxAttempts}`);\n          \n          if (attempts >= maxAttempts) {\n            setIsProcessing(false);\n            setUploadStatus('error');\n            clearInterval(pollingIntervalRef.current);\n            alert('Highlight generation timed out. Please try again later.');\n          }\n        }\n      } catch (error) {\n        console.error('Error polling for highlight:', error);\n        \n        if (attempts >= maxAttempts) {\n          setIsProcessing(false);\n          setUploadStatus('error');\n          clearInterval(pollingIntervalRef.current);\n          alert('Highlight generation timed out. Please try again later.');\n        }\n      }\n    }, 10000); // Poll every 10 seconds\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"header\">\n        <h1>Video Highlights Generator</h1>\n      </div>\n      \n      <div className=\"upload-container\">\n        <div \n          className={`drop-zone ${dragActive ? 'active' : ''}`}\n          onClick={() => fileInputRef.current.click()}\n          onDragEnter={handleDrag}\n          onDragOver={handleDrag}\n          onDragLeave={handleDrag}\n          onDrop={handleDrop}\n        >\n          <input \n            type=\"file\" \n            ref={fileInputRef}\n            onChange={handleFileChange}\n            accept=\"video/mp4\"\n            style={{ display: 'none' }}\n          />\n          {file ? (\n            <p>Selected file: {file.name}</p>\n          ) : (\n            <p>Drag and drop an MP4 video file here, or click to select a file</p>\n          )}\n        </div>\n        \n        {file && !isUploading && !isProcessing && !highlightVideo && (\n          <button \n            onClick={handleUpload}\n            style={{\n              padding: '10px 20px',\n              backgroundColor: '#007bff',\n              color: 'white',\n              border: 'none',\n              borderRadius: '5px',\n              cursor: 'pointer',\n              fontSize: '16px',\n              width: '100%'\n            }}\n          >\n            Upload Video\n          </button>\n        )}\n        \n        {isUploading && (\n          <div className=\"progress-container\">\n            <div className=\"progress-bar\">\n              <div \n                className=\"progress-bar-fill\" \n                style={{ width: `${uploadProgress}%` }}\n              ></div>\n            </div>\n            <p>Uploading: {uploadProgress}%</p>\n          </div>\n        )}\n        \n        {uploadStatus === 'success' && !isProcessing && !highlightVideo && (\n          <div className=\"status-message success\">\n            <p>Upload successful!</p>\n          </div>\n        )}\n        \n        {uploadStatus === 'error' && (\n          <div className=\"status-message error\">\n            <p>Error uploading file. Please try again.</p>\n          </div>\n        )}\n        \n        {isProcessing && (\n          <div className=\"status-message info\">\n            <p>Processing transcription and highlights... This may take a few minutes.</p>\n          </div>\n        )}\n        \n        {highlightVideo && (\n          <div className=\"video-container\">\n            <h2>Your Highlight Video</h2>\n            <video controls>\n              <source src={highlightVideo} type=\"video/mp4\" />\n              Your browser does not support the video tag.\n            </video>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}