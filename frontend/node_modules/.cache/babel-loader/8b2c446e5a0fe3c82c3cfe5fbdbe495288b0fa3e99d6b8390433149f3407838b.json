{"ast":null,"code":"import { S3ExpressIdentityProviderImpl } from \"./s3-express\";\nexport const resolveS3Config = (input, {\n  session\n}) => {\n  const [s3ClientProvider, CreateSessionCommandCtor] = session;\n  const {\n    forcePathStyle,\n    useAccelerateEndpoint,\n    disableMultiregionAccessPoints,\n    followRegionRedirects,\n    s3ExpressIdentityProvider,\n    bucketEndpoint\n  } = input;\n  return Object.assign(input, {\n    forcePathStyle: forcePathStyle ?? false,\n    useAccelerateEndpoint: useAccelerateEndpoint ?? false,\n    disableMultiregionAccessPoints: disableMultiregionAccessPoints ?? false,\n    followRegionRedirects: followRegionRedirects ?? false,\n    s3ExpressIdentityProvider: s3ExpressIdentityProvider ?? new S3ExpressIdentityProviderImpl(async key => s3ClientProvider().send(new CreateSessionCommandCtor({\n      Bucket: key\n    }))),\n    bucketEndpoint: bucketEndpoint ?? false\n  });\n};","map":{"version":3,"names":["S3ExpressIdentityProviderImpl","resolveS3Config","input","session","s3ClientProvider","CreateSessionCommandCtor","forcePathStyle","useAccelerateEndpoint","disableMultiregionAccessPoints","followRegionRedirects","s3ExpressIdentityProvider","bucketEndpoint","Object","assign","key","send","Bucket"],"sources":["/Users/naserabu/Desktop/video distillation/frontend/node_modules/@aws-sdk/middleware-sdk-s3/dist-es/s3Configuration.js"],"sourcesContent":["import { S3ExpressIdentityProviderImpl } from \"./s3-express\";\nexport const resolveS3Config = (input, { session, }) => {\n    const [s3ClientProvider, CreateSessionCommandCtor] = session;\n    const { forcePathStyle, useAccelerateEndpoint, disableMultiregionAccessPoints, followRegionRedirects, s3ExpressIdentityProvider, bucketEndpoint, } = input;\n    return Object.assign(input, {\n        forcePathStyle: forcePathStyle ?? false,\n        useAccelerateEndpoint: useAccelerateEndpoint ?? false,\n        disableMultiregionAccessPoints: disableMultiregionAccessPoints ?? false,\n        followRegionRedirects: followRegionRedirects ?? false,\n        s3ExpressIdentityProvider: s3ExpressIdentityProvider ??\n            new S3ExpressIdentityProviderImpl(async (key) => s3ClientProvider().send(new CreateSessionCommandCtor({\n                Bucket: key,\n            }))),\n        bucketEndpoint: bucketEndpoint ?? false,\n    });\n};\n"],"mappings":"AAAA,SAASA,6BAA6B,QAAQ,cAAc;AAC5D,OAAO,MAAMC,eAAe,GAAGA,CAACC,KAAK,EAAE;EAAEC;AAAS,CAAC,KAAK;EACpD,MAAM,CAACC,gBAAgB,EAAEC,wBAAwB,CAAC,GAAGF,OAAO;EAC5D,MAAM;IAAEG,cAAc;IAAEC,qBAAqB;IAAEC,8BAA8B;IAAEC,qBAAqB;IAAEC,yBAAyB;IAAEC;EAAgB,CAAC,GAAGT,KAAK;EAC1J,OAAOU,MAAM,CAACC,MAAM,CAACX,KAAK,EAAE;IACxBI,cAAc,EAAEA,cAAc,IAAI,KAAK;IACvCC,qBAAqB,EAAEA,qBAAqB,IAAI,KAAK;IACrDC,8BAA8B,EAAEA,8BAA8B,IAAI,KAAK;IACvEC,qBAAqB,EAAEA,qBAAqB,IAAI,KAAK;IACrDC,yBAAyB,EAAEA,yBAAyB,IAChD,IAAIV,6BAA6B,CAAC,MAAOc,GAAG,IAAKV,gBAAgB,CAAC,CAAC,CAACW,IAAI,CAAC,IAAIV,wBAAwB,CAAC;MAClGW,MAAM,EAAEF;IACZ,CAAC,CAAC,CAAC,CAAC;IACRH,cAAc,EAAEA,cAAc,IAAI;EACtC,CAAC,CAAC;AACN,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}