{"ast":null,"code":"import { createChecksumStream } from \"@smithy/util-stream\";\nimport { ChecksumAlgorithm } from \"./constants\";\nimport { getChecksum } from \"./getChecksum\";\nimport { getChecksumAlgorithmListForResponse } from \"./getChecksumAlgorithmListForResponse\";\nimport { getChecksumLocationName } from \"./getChecksumLocationName\";\nimport { isStreaming } from \"./isStreaming\";\nimport { selectChecksumAlgorithmFunction } from \"./selectChecksumAlgorithmFunction\";\nexport const validateChecksumFromResponse = async (response, {\n  config,\n  responseAlgorithms,\n  logger\n}) => {\n  const checksumAlgorithms = getChecksumAlgorithmListForResponse(responseAlgorithms);\n  const {\n    body: responseBody,\n    headers: responseHeaders\n  } = response;\n  for (const algorithm of checksumAlgorithms) {\n    const responseHeader = getChecksumLocationName(algorithm);\n    const checksumFromResponse = responseHeaders[responseHeader];\n    if (checksumFromResponse) {\n      let checksumAlgorithmFn;\n      try {\n        checksumAlgorithmFn = selectChecksumAlgorithmFunction(algorithm, config);\n      } catch (error) {\n        if (algorithm === ChecksumAlgorithm.CRC64NVME) {\n          logger?.warn(`Skipping ${ChecksumAlgorithm.CRC64NVME} checksum validation: ${error.message}`);\n          continue;\n        }\n        throw error;\n      }\n      const {\n        base64Encoder\n      } = config;\n      if (isStreaming(responseBody)) {\n        response.body = createChecksumStream({\n          expectedChecksum: checksumFromResponse,\n          checksumSourceLocation: responseHeader,\n          checksum: new checksumAlgorithmFn(),\n          source: responseBody,\n          base64Encoder\n        });\n        return;\n      }\n      const checksum = await getChecksum(responseBody, {\n        checksumAlgorithmFn,\n        base64Encoder\n      });\n      if (checksum === checksumFromResponse) {\n        break;\n      }\n      throw new Error(`Checksum mismatch: expected \"${checksum}\" but received \"${checksumFromResponse}\"` + ` in response header \"${responseHeader}\".`);\n    }\n  }\n};","map":{"version":3,"names":["createChecksumStream","ChecksumAlgorithm","getChecksum","getChecksumAlgorithmListForResponse","getChecksumLocationName","isStreaming","selectChecksumAlgorithmFunction","validateChecksumFromResponse","response","config","responseAlgorithms","logger","checksumAlgorithms","body","responseBody","headers","responseHeaders","algorithm","responseHeader","checksumFromResponse","checksumAlgorithmFn","error","CRC64NVME","warn","message","base64Encoder","expectedChecksum","checksumSourceLocation","checksum","source","Error"],"sources":["/Users/naserabu/Desktop/video distillation/frontend/node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/validateChecksumFromResponse.js"],"sourcesContent":["import { createChecksumStream } from \"@smithy/util-stream\";\nimport { ChecksumAlgorithm } from \"./constants\";\nimport { getChecksum } from \"./getChecksum\";\nimport { getChecksumAlgorithmListForResponse } from \"./getChecksumAlgorithmListForResponse\";\nimport { getChecksumLocationName } from \"./getChecksumLocationName\";\nimport { isStreaming } from \"./isStreaming\";\nimport { selectChecksumAlgorithmFunction } from \"./selectChecksumAlgorithmFunction\";\nexport const validateChecksumFromResponse = async (response, { config, responseAlgorithms, logger }) => {\n    const checksumAlgorithms = getChecksumAlgorithmListForResponse(responseAlgorithms);\n    const { body: responseBody, headers: responseHeaders } = response;\n    for (const algorithm of checksumAlgorithms) {\n        const responseHeader = getChecksumLocationName(algorithm);\n        const checksumFromResponse = responseHeaders[responseHeader];\n        if (checksumFromResponse) {\n            let checksumAlgorithmFn;\n            try {\n                checksumAlgorithmFn = selectChecksumAlgorithmFunction(algorithm, config);\n            }\n            catch (error) {\n                if (algorithm === ChecksumAlgorithm.CRC64NVME) {\n                    logger?.warn(`Skipping ${ChecksumAlgorithm.CRC64NVME} checksum validation: ${error.message}`);\n                    continue;\n                }\n                throw error;\n            }\n            const { base64Encoder } = config;\n            if (isStreaming(responseBody)) {\n                response.body = createChecksumStream({\n                    expectedChecksum: checksumFromResponse,\n                    checksumSourceLocation: responseHeader,\n                    checksum: new checksumAlgorithmFn(),\n                    source: responseBody,\n                    base64Encoder,\n                });\n                return;\n            }\n            const checksum = await getChecksum(responseBody, { checksumAlgorithmFn, base64Encoder });\n            if (checksum === checksumFromResponse) {\n                break;\n            }\n            throw new Error(`Checksum mismatch: expected \"${checksum}\" but received \"${checksumFromResponse}\"` +\n                ` in response header \"${responseHeader}\".`);\n        }\n    }\n};\n"],"mappings":"AAAA,SAASA,oBAAoB,QAAQ,qBAAqB;AAC1D,SAASC,iBAAiB,QAAQ,aAAa;AAC/C,SAASC,WAAW,QAAQ,eAAe;AAC3C,SAASC,mCAAmC,QAAQ,uCAAuC;AAC3F,SAASC,uBAAuB,QAAQ,2BAA2B;AACnE,SAASC,WAAW,QAAQ,eAAe;AAC3C,SAASC,+BAA+B,QAAQ,mCAAmC;AACnF,OAAO,MAAMC,4BAA4B,GAAG,MAAAA,CAAOC,QAAQ,EAAE;EAAEC,MAAM;EAAEC,kBAAkB;EAAEC;AAAO,CAAC,KAAK;EACpG,MAAMC,kBAAkB,GAAGT,mCAAmC,CAACO,kBAAkB,CAAC;EAClF,MAAM;IAAEG,IAAI,EAAEC,YAAY;IAAEC,OAAO,EAAEC;EAAgB,CAAC,GAAGR,QAAQ;EACjE,KAAK,MAAMS,SAAS,IAAIL,kBAAkB,EAAE;IACxC,MAAMM,cAAc,GAAGd,uBAAuB,CAACa,SAAS,CAAC;IACzD,MAAME,oBAAoB,GAAGH,eAAe,CAACE,cAAc,CAAC;IAC5D,IAAIC,oBAAoB,EAAE;MACtB,IAAIC,mBAAmB;MACvB,IAAI;QACAA,mBAAmB,GAAGd,+BAA+B,CAACW,SAAS,EAAER,MAAM,CAAC;MAC5E,CAAC,CACD,OAAOY,KAAK,EAAE;QACV,IAAIJ,SAAS,KAAKhB,iBAAiB,CAACqB,SAAS,EAAE;UAC3CX,MAAM,EAAEY,IAAI,CAAC,YAAYtB,iBAAiB,CAACqB,SAAS,yBAAyBD,KAAK,CAACG,OAAO,EAAE,CAAC;UAC7F;QACJ;QACA,MAAMH,KAAK;MACf;MACA,MAAM;QAAEI;MAAc,CAAC,GAAGhB,MAAM;MAChC,IAAIJ,WAAW,CAACS,YAAY,CAAC,EAAE;QAC3BN,QAAQ,CAACK,IAAI,GAAGb,oBAAoB,CAAC;UACjC0B,gBAAgB,EAAEP,oBAAoB;UACtCQ,sBAAsB,EAAET,cAAc;UACtCU,QAAQ,EAAE,IAAIR,mBAAmB,CAAC,CAAC;UACnCS,MAAM,EAAEf,YAAY;UACpBW;QACJ,CAAC,CAAC;QACF;MACJ;MACA,MAAMG,QAAQ,GAAG,MAAM1B,WAAW,CAACY,YAAY,EAAE;QAAEM,mBAAmB;QAAEK;MAAc,CAAC,CAAC;MACxF,IAAIG,QAAQ,KAAKT,oBAAoB,EAAE;QACnC;MACJ;MACA,MAAM,IAAIW,KAAK,CAAC,gCAAgCF,QAAQ,mBAAmBT,oBAAoB,GAAG,GAC9F,wBAAwBD,cAAc,IAAI,CAAC;IACnD;EACJ;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}