{"ast":null,"code":"import { formatUrl } from \"@aws-sdk/util-format-url\";\nimport { getEndpointFromInstructions } from \"@smithy/middleware-endpoint\";\nimport { HttpRequest } from \"@smithy/protocol-http\";\nimport { S3RequestPresigner } from \"./presigner\";\nexport const getSignedUrl = async (client, command, options = {}) => {\n  let s3Presigner;\n  let region;\n  if (typeof client.config.endpointProvider === \"function\") {\n    const endpointV2 = await getEndpointFromInstructions(command.input, command.constructor, client.config);\n    const authScheme = endpointV2.properties?.authSchemes?.[0];\n    if (authScheme?.name === \"sigv4a\") {\n      region = authScheme?.signingRegionSet?.join(\",\");\n    } else {\n      region = authScheme?.signingRegion;\n    }\n    s3Presigner = new S3RequestPresigner({\n      ...client.config,\n      signingName: authScheme?.signingName,\n      region: async () => region\n    });\n  } else {\n    s3Presigner = new S3RequestPresigner(client.config);\n  }\n  const presignInterceptMiddleware = (next, context) => async args => {\n    const {\n      request\n    } = args;\n    if (!HttpRequest.isInstance(request)) {\n      throw new Error(\"Request to be presigned is not an valid HTTP request.\");\n    }\n    delete request.headers[\"amz-sdk-invocation-id\"];\n    delete request.headers[\"amz-sdk-request\"];\n    delete request.headers[\"x-amz-user-agent\"];\n    let presigned;\n    const presignerOptions = {\n      ...options,\n      signingRegion: options.signingRegion ?? context[\"signing_region\"] ?? region,\n      signingService: options.signingService ?? context[\"signing_service\"]\n    };\n    if (context.s3ExpressIdentity) {\n      presigned = await s3Presigner.presignWithCredentials(request, context.s3ExpressIdentity, presignerOptions);\n    } else {\n      presigned = await s3Presigner.presign(request, presignerOptions);\n    }\n    return {\n      response: {},\n      output: {\n        $metadata: {\n          httpStatusCode: 200\n        },\n        presigned\n      }\n    };\n  };\n  const middlewareName = \"presignInterceptMiddleware\";\n  const clientStack = client.middlewareStack.clone();\n  clientStack.addRelativeTo(presignInterceptMiddleware, {\n    name: middlewareName,\n    relation: \"before\",\n    toMiddleware: \"awsAuthMiddleware\",\n    override: true\n  });\n  const handler = command.resolveMiddleware(clientStack, client.config, {});\n  const {\n    output\n  } = await handler({\n    input: command.input\n  });\n  const {\n    presigned\n  } = output;\n  return formatUrl(presigned);\n};","map":{"version":3,"names":["formatUrl","getEndpointFromInstructions","HttpRequest","S3RequestPresigner","getSignedUrl","client","command","options","s3Presigner","region","config","endpointProvider","endpointV2","input","constructor","authScheme","properties","authSchemes","name","signingRegionSet","join","signingRegion","signingName","presignInterceptMiddleware","next","context","args","request","isInstance","Error","headers","presigned","presignerOptions","signingService","s3ExpressIdentity","presignWithCredentials","presign","response","output","$metadata","httpStatusCode","middlewareName","clientStack","middlewareStack","clone","addRelativeTo","relation","toMiddleware","override","handler","resolveMiddleware"],"sources":["/Users/naserabu/Desktop/video distillation/frontend/node_modules/@aws-sdk/s3-request-presigner/dist-es/getSignedUrl.js"],"sourcesContent":["import { formatUrl } from \"@aws-sdk/util-format-url\";\nimport { getEndpointFromInstructions } from \"@smithy/middleware-endpoint\";\nimport { HttpRequest } from \"@smithy/protocol-http\";\nimport { S3RequestPresigner } from \"./presigner\";\nexport const getSignedUrl = async (client, command, options = {}) => {\n    let s3Presigner;\n    let region;\n    if (typeof client.config.endpointProvider === \"function\") {\n        const endpointV2 = await getEndpointFromInstructions(command.input, command.constructor, client.config);\n        const authScheme = endpointV2.properties?.authSchemes?.[0];\n        if (authScheme?.name === \"sigv4a\") {\n            region = authScheme?.signingRegionSet?.join(\",\");\n        }\n        else {\n            region = authScheme?.signingRegion;\n        }\n        s3Presigner = new S3RequestPresigner({\n            ...client.config,\n            signingName: authScheme?.signingName,\n            region: async () => region,\n        });\n    }\n    else {\n        s3Presigner = new S3RequestPresigner(client.config);\n    }\n    const presignInterceptMiddleware = (next, context) => async (args) => {\n        const { request } = args;\n        if (!HttpRequest.isInstance(request)) {\n            throw new Error(\"Request to be presigned is not an valid HTTP request.\");\n        }\n        delete request.headers[\"amz-sdk-invocation-id\"];\n        delete request.headers[\"amz-sdk-request\"];\n        delete request.headers[\"x-amz-user-agent\"];\n        let presigned;\n        const presignerOptions = {\n            ...options,\n            signingRegion: options.signingRegion ?? context[\"signing_region\"] ?? region,\n            signingService: options.signingService ?? context[\"signing_service\"],\n        };\n        if (context.s3ExpressIdentity) {\n            presigned = await s3Presigner.presignWithCredentials(request, context.s3ExpressIdentity, presignerOptions);\n        }\n        else {\n            presigned = await s3Presigner.presign(request, presignerOptions);\n        }\n        return {\n            response: {},\n            output: {\n                $metadata: { httpStatusCode: 200 },\n                presigned,\n            },\n        };\n    };\n    const middlewareName = \"presignInterceptMiddleware\";\n    const clientStack = client.middlewareStack.clone();\n    clientStack.addRelativeTo(presignInterceptMiddleware, {\n        name: middlewareName,\n        relation: \"before\",\n        toMiddleware: \"awsAuthMiddleware\",\n        override: true,\n    });\n    const handler = command.resolveMiddleware(clientStack, client.config, {});\n    const { output } = await handler({ input: command.input });\n    const { presigned } = output;\n    return formatUrl(presigned);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}