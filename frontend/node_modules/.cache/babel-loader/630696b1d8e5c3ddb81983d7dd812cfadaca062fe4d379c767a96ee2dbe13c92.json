{"ast":null,"code":"import { HttpRequest } from \"@smithy/protocol-http\";\nimport { getChecksumAlgorithmListForResponse } from \"./getChecksumAlgorithmListForResponse\";\nimport { getChecksumLocationName } from \"./getChecksumLocationName\";\nimport { isChecksumWithPartNumber } from \"./isChecksumWithPartNumber\";\nimport { validateChecksumFromResponse } from \"./validateChecksumFromResponse\";\nexport const flexibleChecksumsResponseMiddlewareOptions = {\n  name: \"flexibleChecksumsResponseMiddleware\",\n  toMiddleware: \"deserializerMiddleware\",\n  relation: \"after\",\n  tags: [\"BODY_CHECKSUM\"],\n  override: true\n};\nexport const flexibleChecksumsResponseMiddleware = (config, middlewareConfig) => (next, context) => async args => {\n  if (!HttpRequest.isInstance(args.request)) {\n    return next(args);\n  }\n  const input = args.input;\n  const result = await next(args);\n  const response = result.response;\n  const {\n    requestValidationModeMember,\n    responseAlgorithms\n  } = middlewareConfig;\n  if (requestValidationModeMember && input[requestValidationModeMember] === \"ENABLED\") {\n    const {\n      clientName,\n      commandName\n    } = context;\n    const isS3WholeObjectMultipartGetResponseChecksum = clientName === \"S3Client\" && commandName === \"GetObjectCommand\" && getChecksumAlgorithmListForResponse(responseAlgorithms).every(algorithm => {\n      const responseHeader = getChecksumLocationName(algorithm);\n      const checksumFromResponse = response.headers[responseHeader];\n      return !checksumFromResponse || isChecksumWithPartNumber(checksumFromResponse);\n    });\n    if (isS3WholeObjectMultipartGetResponseChecksum) {\n      return result;\n    }\n    await validateChecksumFromResponse(response, {\n      config,\n      responseAlgorithms,\n      logger: context.logger\n    });\n  }\n  return result;\n};","map":{"version":3,"names":["HttpRequest","getChecksumAlgorithmListForResponse","getChecksumLocationName","isChecksumWithPartNumber","validateChecksumFromResponse","flexibleChecksumsResponseMiddlewareOptions","name","toMiddleware","relation","tags","override","flexibleChecksumsResponseMiddleware","config","middlewareConfig","next","context","args","isInstance","request","input","result","response","requestValidationModeMember","responseAlgorithms","clientName","commandName","isS3WholeObjectMultipartGetResponseChecksum","every","algorithm","responseHeader","checksumFromResponse","headers","logger"],"sources":["/Users/naserabu/Desktop/video distillation/frontend/node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/flexibleChecksumsResponseMiddleware.js"],"sourcesContent":["import { HttpRequest } from \"@smithy/protocol-http\";\nimport { getChecksumAlgorithmListForResponse } from \"./getChecksumAlgorithmListForResponse\";\nimport { getChecksumLocationName } from \"./getChecksumLocationName\";\nimport { isChecksumWithPartNumber } from \"./isChecksumWithPartNumber\";\nimport { validateChecksumFromResponse } from \"./validateChecksumFromResponse\";\nexport const flexibleChecksumsResponseMiddlewareOptions = {\n    name: \"flexibleChecksumsResponseMiddleware\",\n    toMiddleware: \"deserializerMiddleware\",\n    relation: \"after\",\n    tags: [\"BODY_CHECKSUM\"],\n    override: true,\n};\nexport const flexibleChecksumsResponseMiddleware = (config, middlewareConfig) => (next, context) => async (args) => {\n    if (!HttpRequest.isInstance(args.request)) {\n        return next(args);\n    }\n    const input = args.input;\n    const result = await next(args);\n    const response = result.response;\n    const { requestValidationModeMember, responseAlgorithms } = middlewareConfig;\n    if (requestValidationModeMember && input[requestValidationModeMember] === \"ENABLED\") {\n        const { clientName, commandName } = context;\n        const isS3WholeObjectMultipartGetResponseChecksum = clientName === \"S3Client\" &&\n            commandName === \"GetObjectCommand\" &&\n            getChecksumAlgorithmListForResponse(responseAlgorithms).every((algorithm) => {\n                const responseHeader = getChecksumLocationName(algorithm);\n                const checksumFromResponse = response.headers[responseHeader];\n                return !checksumFromResponse || isChecksumWithPartNumber(checksumFromResponse);\n            });\n        if (isS3WholeObjectMultipartGetResponseChecksum) {\n            return result;\n        }\n        await validateChecksumFromResponse(response, {\n            config,\n            responseAlgorithms,\n            logger: context.logger,\n        });\n    }\n    return result;\n};\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,uBAAuB;AACnD,SAASC,mCAAmC,QAAQ,uCAAuC;AAC3F,SAASC,uBAAuB,QAAQ,2BAA2B;AACnE,SAASC,wBAAwB,QAAQ,4BAA4B;AACrE,SAASC,4BAA4B,QAAQ,gCAAgC;AAC7E,OAAO,MAAMC,0CAA0C,GAAG;EACtDC,IAAI,EAAE,qCAAqC;EAC3CC,YAAY,EAAE,wBAAwB;EACtCC,QAAQ,EAAE,OAAO;EACjBC,IAAI,EAAE,CAAC,eAAe,CAAC;EACvBC,QAAQ,EAAE;AACd,CAAC;AACD,OAAO,MAAMC,mCAAmC,GAAGA,CAACC,MAAM,EAAEC,gBAAgB,KAAK,CAACC,IAAI,EAAEC,OAAO,KAAK,MAAOC,IAAI,IAAK;EAChH,IAAI,CAAChB,WAAW,CAACiB,UAAU,CAACD,IAAI,CAACE,OAAO,CAAC,EAAE;IACvC,OAAOJ,IAAI,CAACE,IAAI,CAAC;EACrB;EACA,MAAMG,KAAK,GAAGH,IAAI,CAACG,KAAK;EACxB,MAAMC,MAAM,GAAG,MAAMN,IAAI,CAACE,IAAI,CAAC;EAC/B,MAAMK,QAAQ,GAAGD,MAAM,CAACC,QAAQ;EAChC,MAAM;IAAEC,2BAA2B;IAAEC;EAAmB,CAAC,GAAGV,gBAAgB;EAC5E,IAAIS,2BAA2B,IAAIH,KAAK,CAACG,2BAA2B,CAAC,KAAK,SAAS,EAAE;IACjF,MAAM;MAAEE,UAAU;MAAEC;IAAY,CAAC,GAAGV,OAAO;IAC3C,MAAMW,2CAA2C,GAAGF,UAAU,KAAK,UAAU,IACzEC,WAAW,KAAK,kBAAkB,IAClCxB,mCAAmC,CAACsB,kBAAkB,CAAC,CAACI,KAAK,CAAEC,SAAS,IAAK;MACzE,MAAMC,cAAc,GAAG3B,uBAAuB,CAAC0B,SAAS,CAAC;MACzD,MAAME,oBAAoB,GAAGT,QAAQ,CAACU,OAAO,CAACF,cAAc,CAAC;MAC7D,OAAO,CAACC,oBAAoB,IAAI3B,wBAAwB,CAAC2B,oBAAoB,CAAC;IAClF,CAAC,CAAC;IACN,IAAIJ,2CAA2C,EAAE;MAC7C,OAAON,MAAM;IACjB;IACA,MAAMhB,4BAA4B,CAACiB,QAAQ,EAAE;MACzCT,MAAM;MACNW,kBAAkB;MAClBS,MAAM,EAAEjB,OAAO,CAACiB;IACpB,CAAC,CAAC;EACN;EACA,OAAOZ,MAAM;AACjB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}