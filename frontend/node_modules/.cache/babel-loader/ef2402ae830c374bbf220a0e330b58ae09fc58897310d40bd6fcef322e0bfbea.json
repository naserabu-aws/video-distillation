{"ast":null,"code":"var _jsxFileName = \"/Users/naserabu/Desktop/video distillation/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\n\n// S3 bucket name and API endpoint\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst S3_BUCKET = process.env.REACT_APP_S3_BUCKET;\nconst API_ENDPOINT = process.env.REACT_APP_API_ENDPOINT;\nfunction App() {\n  _s();\n  const [file, setFile] = useState(null);\n  const [uploadProgress, setUploadProgress] = useState(0);\n  const [uploadStatus, setUploadStatus] = useState('');\n  const [isUploading, setIsUploading] = useState(false);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [highlightVideo, setHighlightVideo] = useState(null);\n  const [s3Key, setS3Key] = useState('');\n  const [dragActive, setDragActive] = useState(false);\n  const fileInputRef = useRef(null);\n  const pollingIntervalRef = useRef(null);\n\n  // Clean up polling interval on component unmount\n  useEffect(() => {\n    return () => {\n      if (pollingIntervalRef.current) {\n        clearInterval(pollingIntervalRef.current);\n      }\n    };\n  }, []);\n\n  // Handle file selection\n  const handleFileChange = e => {\n    const selectedFile = e.target.files[0];\n    if (selectedFile && selectedFile.type === 'video/mp4') {\n      setFile(selectedFile);\n      setUploadStatus('');\n      setHighlightVideo(null);\n    } else {\n      setUploadStatus('error');\n      setFile(null);\n      alert('Please select an MP4 video file.');\n    }\n  };\n\n  // Handle drag events\n  const handleDrag = e => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (e.type === 'dragenter' || e.type === 'dragover') {\n      setDragActive(true);\n    } else if (e.type === 'dragleave') {\n      setDragActive(false);\n    }\n  };\n\n  // Handle drop event\n  const handleDrop = e => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragActive(false);\n    if (e.dataTransfer.files && e.dataTransfer.files[0]) {\n      const droppedFile = e.dataTransfer.files[0];\n      if (droppedFile.type === 'video/mp4') {\n        setFile(droppedFile);\n        setUploadStatus('');\n        setHighlightVideo(null);\n      } else {\n        setUploadStatus('error');\n        setFile(null);\n        alert('Please select an MP4 video file.');\n      }\n    }\n  };\n\n  // Handle file upload\n  const handleUpload = async () => {\n    if (!file) {\n      alert('Please select a file first.');\n      return;\n    }\n    try {\n      setIsUploading(true);\n      setUploadProgress(0);\n      setUploadStatus('uploading');\n\n      // Generate a unique filename with timestamp and random ID\n      const timestamp = Math.floor(Date.now() / 1000).toString();\n      const randomId = Math.random().toString(36).substring(2, 10);\n      const cleanedFilename = file.name.replace(/[^a-zA-Z0-9._-]/g, '');\n      const s3Key = `input-videos/${timestamp}-${randomId}-${cleanedFilename}`;\n      setS3Key(s3Key);\n\n      // Get presigned URL from API Gateway\n      const response = await fetch(API_ENDPOINT, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          fileName: s3Key,\n          contentType: file.type\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Failed to get presigned URL: ${response.status}`);\n      }\n      const data = await response.json();\n      const presignedUrl = data.presignedUrl;\n\n      // Use XMLHttpRequest for upload progress tracking\n      const xhr = new XMLHttpRequest();\n      xhr.open('PUT', presignedUrl);\n      xhr.setRequestHeader('Content-Type', file.type);\n      xhr.upload.onprogress = event => {\n        if (event.lengthComputable) {\n          const percentCompleted = Math.round(event.loaded * 100 / event.total);\n          setUploadProgress(percentCompleted);\n        }\n      };\n      xhr.onload = () => {\n        if (xhr.status === 200) {\n          setUploadStatus('success');\n          setIsUploading(false);\n          setIsProcessing(true);\n\n          // Start polling for highlight video\n          startPollingForHighlight(s3Key);\n        } else {\n          throw new Error(`Upload failed with status: ${xhr.status}`);\n        }\n      };\n      xhr.onerror = () => {\n        throw new Error('Upload failed due to network error');\n      };\n      xhr.send(file);\n    } catch (error) {\n      console.error('Error uploading file:', error);\n      setUploadStatus('error');\n      setIsUploading(false);\n    }\n  };\n\n  // Poll for highlight video\n  const startPollingForHighlight = videoKey => {\n    if (pollingIntervalRef.current) {\n      clearInterval(pollingIntervalRef.current);\n    }\n    let attempts = 0;\n    const maxAttempts = 30; // Poll for up to 5 minutes (30 * 10 seconds)\n\n    pollingIntervalRef.current = setInterval(async () => {\n      attempts++;\n      try {\n        // Extract timestamp and ID from the S3 key\n        // Format: input-videos/TIMESTAMP-ID-filename.mp4\n        const keyParts = videoKey.split('/');\n        const filename = keyParts[keyParts.length - 1];\n        const filenameParts = filename.split('-');\n        if (filenameParts.length >= 2) {\n          const timestamp = filenameParts[0];\n          const id = filenameParts[1];\n\n          // Check if highlight video exists\n          const highlightKey = `highlight-videos/${timestamp}-${id}-highlights.mp4`;\n\n          // Try to get the highlight video\n          const highlightUrl = `https://${S3_BUCKET}.s3.amazonaws.com/${highlightKey}`;\n\n          // Make a HEAD request to check if the file exists\n          try {\n            const response = await fetch(highlightUrl, {\n              method: 'HEAD'\n            });\n            if (response.ok) {\n              // If we get here, the file exists\n              setHighlightVideo(highlightUrl);\n              setIsProcessing(false);\n              clearInterval(pollingIntervalRef.current);\n            } else {\n              throw new Error('File not found');\n            }\n          } catch (error) {\n            // File doesn't exist yet, continue polling\n            console.log(`Highlight video not ready yet. Attempt ${attempts}/${maxAttempts}`);\n            if (attempts >= maxAttempts) {\n              setIsProcessing(false);\n              setUploadStatus('error');\n              clearInterval(pollingIntervalRef.current);\n              alert('Highlight generation timed out. Please try again later.');\n            }\n          }\n        }\n      } catch (error) {\n        console.error('Error polling for highlight:', error);\n        if (attempts >= maxAttempts) {\n          setIsProcessing(false);\n          setUploadStatus('error');\n          clearInterval(pollingIntervalRef.current);\n          alert('Highlight generation timed out. Please try again later.');\n        }\n      }\n    }, 10000); // Poll every 10 seconds\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Video Highlights Generator\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"upload-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `drop-zone ${dragActive ? 'active' : ''}`,\n        onClick: () => fileInputRef.current.click(),\n        onDragEnter: handleDrag,\n        onDragOver: handleDrag,\n        onDragLeave: handleDrag,\n        onDrop: handleDrop,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          ref: fileInputRef,\n          onChange: handleFileChange,\n          accept: \"video/mp4\",\n          style: {\n            display: 'none'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 11\n        }, this), file ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Selected file: \", file.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Drag and drop an MP4 video file here, or click to select a file\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }, this), file && !isUploading && !isProcessing && !highlightVideo && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleUpload,\n        style: {\n          padding: '10px 20px',\n          backgroundColor: '#007bff',\n          color: 'white',\n          border: 'none',\n          borderRadius: '5px',\n          cursor: 'pointer',\n          fontSize: '16px',\n          width: '100%'\n        },\n        children: \"Upload Video\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 11\n      }, this), isUploading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"progress-bar\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"progress-bar-fill\",\n            style: {\n              width: `${uploadProgress}%`\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Uploading: \", uploadProgress, \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 11\n      }, this), uploadStatus === 'success' && !isProcessing && !highlightVideo && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-message success\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Upload successful!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 11\n      }, this), uploadStatus === 'error' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-message error\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Error uploading file. Please try again.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 11\n      }, this), isProcessing && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-message info\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Processing transcription and highlights... This may take a few minutes.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 11\n      }, this), highlightVideo && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"video-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Your Highlight Video\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n          controls: true,\n          children: [/*#__PURE__*/_jsxDEV(\"source\", {\n            src: highlightVideo,\n            type: \"video/mp4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 296,\n            columnNumber: 15\n          }, this), \"Your browser does not support the video tag.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 216,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"l8Uj50KQTEH31bgH5fVprl7lOis=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","jsxDEV","_jsxDEV","S3_BUCKET","process","env","REACT_APP_S3_BUCKET","API_ENDPOINT","REACT_APP_API_ENDPOINT","App","_s","file","setFile","uploadProgress","setUploadProgress","uploadStatus","setUploadStatus","isUploading","setIsUploading","isProcessing","setIsProcessing","highlightVideo","setHighlightVideo","s3Key","setS3Key","dragActive","setDragActive","fileInputRef","pollingIntervalRef","current","clearInterval","handleFileChange","e","selectedFile","target","files","type","alert","handleDrag","preventDefault","stopPropagation","handleDrop","dataTransfer","droppedFile","handleUpload","timestamp","Math","floor","Date","now","toString","randomId","random","substring","cleanedFilename","name","replace","response","fetch","method","headers","body","JSON","stringify","fileName","contentType","ok","Error","status","data","json","presignedUrl","xhr","XMLHttpRequest","open","setRequestHeader","upload","onprogress","event","lengthComputable","percentCompleted","round","loaded","total","onload","startPollingForHighlight","onerror","send","error","console","videoKey","attempts","maxAttempts","setInterval","keyParts","split","filename","length","filenameParts","id","highlightKey","highlightUrl","log","className","children","_jsxFileName","lineNumber","columnNumber","onClick","click","onDragEnter","onDragOver","onDragLeave","onDrop","ref","onChange","accept","style","display","padding","backgroundColor","color","border","borderRadius","cursor","fontSize","width","controls","src","_c","$RefreshReg$"],"sources":["/Users/naserabu/Desktop/video distillation/frontend/src/App.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\n\n// S3 bucket name and API endpoint\nconst S3_BUCKET = process.env.REACT_APP_S3_BUCKET;\nconst API_ENDPOINT = process.env.REACT_APP_API_ENDPOINT;\n\nfunction App() {\n  const [file, setFile] = useState(null);\n  const [uploadProgress, setUploadProgress] = useState(0);\n  const [uploadStatus, setUploadStatus] = useState('');\n  const [isUploading, setIsUploading] = useState(false);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [highlightVideo, setHighlightVideo] = useState(null);\n  const [s3Key, setS3Key] = useState('');\n  const [dragActive, setDragActive] = useState(false);\n  const fileInputRef = useRef(null);\n  const pollingIntervalRef = useRef(null);\n\n  // Clean up polling interval on component unmount\n  useEffect(() => {\n    return () => {\n      if (pollingIntervalRef.current) {\n        clearInterval(pollingIntervalRef.current);\n      }\n    };\n  }, []);\n\n  // Handle file selection\n  const handleFileChange = (e) => {\n    const selectedFile = e.target.files[0];\n    if (selectedFile && selectedFile.type === 'video/mp4') {\n      setFile(selectedFile);\n      setUploadStatus('');\n      setHighlightVideo(null);\n    } else {\n      setUploadStatus('error');\n      setFile(null);\n      alert('Please select an MP4 video file.');\n    }\n  };\n\n  // Handle drag events\n  const handleDrag = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    \n    if (e.type === 'dragenter' || e.type === 'dragover') {\n      setDragActive(true);\n    } else if (e.type === 'dragleave') {\n      setDragActive(false);\n    }\n  };\n\n  // Handle drop event\n  const handleDrop = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragActive(false);\n    \n    if (e.dataTransfer.files && e.dataTransfer.files[0]) {\n      const droppedFile = e.dataTransfer.files[0];\n      if (droppedFile.type === 'video/mp4') {\n        setFile(droppedFile);\n        setUploadStatus('');\n        setHighlightVideo(null);\n      } else {\n        setUploadStatus('error');\n        setFile(null);\n        alert('Please select an MP4 video file.');\n      }\n    }\n  };\n\n  // Handle file upload\n  const handleUpload = async () => {\n    if (!file) {\n      alert('Please select a file first.');\n      return;\n    }\n\n    try {\n      setIsUploading(true);\n      setUploadProgress(0);\n      setUploadStatus('uploading');\n\n      // Generate a unique filename with timestamp and random ID\n      const timestamp = Math.floor(Date.now() / 1000).toString();\n      const randomId = Math.random().toString(36).substring(2, 10);\n      const cleanedFilename = file.name.replace(/[^a-zA-Z0-9._-]/g, '');\n      const s3Key = `input-videos/${timestamp}-${randomId}-${cleanedFilename}`;\n      setS3Key(s3Key);\n\n      // Get presigned URL from API Gateway\n      const response = await fetch(API_ENDPOINT, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          fileName: s3Key,\n          contentType: file.type\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to get presigned URL: ${response.status}`);\n      }\n\n      const data = await response.json();\n      const presignedUrl = data.presignedUrl;\n\n      // Use XMLHttpRequest for upload progress tracking\n      const xhr = new XMLHttpRequest();\n      xhr.open('PUT', presignedUrl);\n      xhr.setRequestHeader('Content-Type', file.type);\n      \n      xhr.upload.onprogress = (event) => {\n        if (event.lengthComputable) {\n          const percentCompleted = Math.round((event.loaded * 100) / event.total);\n          setUploadProgress(percentCompleted);\n        }\n      };\n      \n      xhr.onload = () => {\n        if (xhr.status === 200) {\n          setUploadStatus('success');\n          setIsUploading(false);\n          setIsProcessing(true);\n          \n          // Start polling for highlight video\n          startPollingForHighlight(s3Key);\n        } else {\n          throw new Error(`Upload failed with status: ${xhr.status}`);\n        }\n      };\n      \n      xhr.onerror = () => {\n        throw new Error('Upload failed due to network error');\n      };\n      \n      xhr.send(file);\n    } catch (error) {\n      console.error('Error uploading file:', error);\n      setUploadStatus('error');\n      setIsUploading(false);\n    }\n  };\n\n  // Poll for highlight video\n  const startPollingForHighlight = (videoKey) => {\n    if (pollingIntervalRef.current) {\n      clearInterval(pollingIntervalRef.current);\n    }\n\n    let attempts = 0;\n    const maxAttempts = 30; // Poll for up to 5 minutes (30 * 10 seconds)\n\n    pollingIntervalRef.current = setInterval(async () => {\n      attempts++;\n      \n      try {\n        // Extract timestamp and ID from the S3 key\n        // Format: input-videos/TIMESTAMP-ID-filename.mp4\n        const keyParts = videoKey.split('/');\n        const filename = keyParts[keyParts.length - 1];\n        const filenameParts = filename.split('-');\n        \n        if (filenameParts.length >= 2) {\n          const timestamp = filenameParts[0];\n          const id = filenameParts[1];\n          \n          // Check if highlight video exists\n          const highlightKey = `highlight-videos/${timestamp}-${id}-highlights.mp4`;\n          \n          // Try to get the highlight video\n          const highlightUrl = `https://${S3_BUCKET}.s3.amazonaws.com/${highlightKey}`;\n          \n          // Make a HEAD request to check if the file exists\n          try {\n            const response = await fetch(highlightUrl, { method: 'HEAD' });\n            \n            if (response.ok) {\n              // If we get here, the file exists\n              setHighlightVideo(highlightUrl);\n              setIsProcessing(false);\n              clearInterval(pollingIntervalRef.current);\n            } else {\n              throw new Error('File not found');\n            }\n          } catch (error) {\n            // File doesn't exist yet, continue polling\n            console.log(`Highlight video not ready yet. Attempt ${attempts}/${maxAttempts}`);\n            \n            if (attempts >= maxAttempts) {\n              setIsProcessing(false);\n              setUploadStatus('error');\n              clearInterval(pollingIntervalRef.current);\n              alert('Highlight generation timed out. Please try again later.');\n            }\n          }\n        }\n      } catch (error) {\n        console.error('Error polling for highlight:', error);\n        \n        if (attempts >= maxAttempts) {\n          setIsProcessing(false);\n          setUploadStatus('error');\n          clearInterval(pollingIntervalRef.current);\n          alert('Highlight generation timed out. Please try again later.');\n        }\n      }\n    }, 10000); // Poll every 10 seconds\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"header\">\n        <h1>Video Highlights Generator</h1>\n      </div>\n      \n      <div className=\"upload-container\">\n        <div \n          className={`drop-zone ${dragActive ? 'active' : ''}`}\n          onClick={() => fileInputRef.current.click()}\n          onDragEnter={handleDrag}\n          onDragOver={handleDrag}\n          onDragLeave={handleDrag}\n          onDrop={handleDrop}\n        >\n          <input \n            type=\"file\" \n            ref={fileInputRef}\n            onChange={handleFileChange}\n            accept=\"video/mp4\"\n            style={{ display: 'none' }}\n          />\n          {file ? (\n            <p>Selected file: {file.name}</p>\n          ) : (\n            <p>Drag and drop an MP4 video file here, or click to select a file</p>\n          )}\n        </div>\n        \n        {file && !isUploading && !isProcessing && !highlightVideo && (\n          <button \n            onClick={handleUpload}\n            style={{\n              padding: '10px 20px',\n              backgroundColor: '#007bff',\n              color: 'white',\n              border: 'none',\n              borderRadius: '5px',\n              cursor: 'pointer',\n              fontSize: '16px',\n              width: '100%'\n            }}\n          >\n            Upload Video\n          </button>\n        )}\n        \n        {isUploading && (\n          <div className=\"progress-container\">\n            <div className=\"progress-bar\">\n              <div \n                className=\"progress-bar-fill\" \n                style={{ width: `${uploadProgress}%` }}\n              ></div>\n            </div>\n            <p>Uploading: {uploadProgress}%</p>\n          </div>\n        )}\n        \n        {uploadStatus === 'success' && !isProcessing && !highlightVideo && (\n          <div className=\"status-message success\">\n            <p>Upload successful!</p>\n          </div>\n        )}\n        \n        {uploadStatus === 'error' && (\n          <div className=\"status-message error\">\n            <p>Error uploading file. Please try again.</p>\n          </div>\n        )}\n        \n        {isProcessing && (\n          <div className=\"status-message info\">\n            <p>Processing transcription and highlights... This may take a few minutes.</p>\n          </div>\n        )}\n        \n        {highlightVideo && (\n          <div className=\"video-container\">\n            <h2>Your Highlight Video</h2>\n            <video controls>\n              <source src={highlightVideo} type=\"video/mp4\" />\n              Your browser does not support the video tag.\n            </video>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}